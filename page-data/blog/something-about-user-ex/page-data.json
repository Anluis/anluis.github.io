{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/something-about-user-ex","result":{"data":{"markdownRemark":{"html":"<h3>控制内容流量</h3>\n<p>这可能是一个老生常谈的内容，但是往往非常容易被忽略。虽然现在网速越来越快，但是很多用户的使用场景是在<strong>移动端</strong>并不是有在家100M下行的速度，所以怎么样能保证在网络不太好的情况下，让用户至少能用。</p>\n<p>分为两方面，第一方面自然是服务器的下行带宽必须非常大。那么解决方法自然是充钱了。</p>\n<p><img src=\"/static/images/pony.jpg\" alt=\"pony\"></p>\n<p>​\t</p>\n<p>另一方面，我们为什么不对自己手头上的素材内容进行处理呢？从传统的 gulp 任务来把所有图片素材跑一个 tinyPng。但是对于某些场景下，图片的素材并不是本工程内包含的。如果要吹毛求疵一下，好像解法只有跑第三方云服务的图片压缩剪裁。</p>\n<p>理想状态下，我们去计算一下图片资源的逻辑像素比，来得出最佳调整尺寸，丢给图片剪裁的API。这里需要注意几个点：</p>\n<p>1.格式是否需要被转化，例如iOS目前对 webp 的支持不太好，以及 GIF 动画被转过去之后就不会动了</p>\n<p>2.以什么作为基准，就是说是以宽度100%，高度同比缩放呢，还是相反</p>\n<p>3.一下是一个为图片Url添加剪裁后缀的函数，convertFormat 表示转化的格式，convertQuality表示转化目标的质量</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function-variable function\">addBgSuffix</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n<span class=\"token parameter\">​    url<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n​    width<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\n​    height<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\n​    notChangeFormat<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n​    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url <span class=\"token operator\">===</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n​        <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n​    <span class=\"token punctuation\">}</span>\n​    <span class=\"token keyword\">let</span> suffixArr<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n​    <span class=\"token keyword\">let</span> suffix <span class=\"token operator\">=</span> <span class=\"token string\">'imageMogr2/'</span><span class=\"token punctuation\">;</span>\n​    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>width <span class=\"token operator\">||</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n​        <span class=\"token keyword\">let</span> tempSuffix <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n​        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n​            tempSuffix <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">thumbnail/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>width <span class=\"token operator\">*</span> pixelRatio<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">x</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n​        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n​            tempSuffix <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">thumbnail/x</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>height <span class=\"token operator\">?</span> height <span class=\"token operator\">*</span> pixelRatio <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n​        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>width <span class=\"token operator\">&amp;&amp;</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n​            tempSuffix <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">thumbnail/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>width <span class=\"token operator\">*</span> pixelRatio<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">x</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n​                height <span class=\"token operator\">*</span> pixelRatio\n​            <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n​        <span class=\"token punctuation\">}</span>\n​        suffixArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>tempSuffix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n​    <span class=\"token punctuation\">}</span>\n​    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>notChangeFormat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n​        suffixArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">format/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>convertFormat<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n​    <span class=\"token punctuation\">}</span>\n​    suffixArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">quality/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>convertQuality<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n​    <span class=\"token keyword\">return</span> <span class=\"token function\">addImgSuffix</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> suffix <span class=\"token operator\">+</span> suffixArr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>可以看一下相关的API：<a href=\"https://cloud.tencent.com/document/product/460/32832\">https://cloud.tencent.com/document/product/460/32832</a></p>\n<p>一般来说，能做到用户肉眼看到足够清楚，并且流量足够小就OK了。例如美团首屏：</p>\n<img src=\"/static/images/meituan-shot.png\" style=\"width: 50%\"/>\n<p>看这个图的体积基本上只有10kb+左右</p>\n<img src=\"/static/images/r-light-of-china.png\" style=\"width: 50%\"/>\n<p>当然这只是在图片方面，其他的媒体素材自然是需要处理的。想当初第一次看到某个高端项目的时候，光首屏就有接近 16M 的流量，一张张背景图那都是 proRAW 的吧，果然有点高端🐶。</p>\n<h3>增大可点击区域</h3>\n<p>有些服务之所以干不过竞争对手那肯定是有原因的，给他强行找一个，那就是，这点击区域是给人点的吗？</p>\n<img src=\"/static/images/select-address-1.png\" style=\"width: 50%\"/>\n<p>相比某友商就大很多</p>\n<img src=\"/static/images/select-address-2.png\" style=\"width: 50%\"/>\n<p>有些新手上路的时候，经常会把一些按钮的点击区域设置为这个图形的大小，导致非常难点到。所以，大，就是好，道理很朴素。</p>\n<h3>控制首屏流量</h3>\n<p>这个已经是老生常谈了，用户使用你的应用，有些功能相当于基础建设了，所以暂且不谈首屏的渲染速度，自然 SSR 是比 SPA 快好多的，我们只说说流量。</p>\n<p>继续对比两大干饭巨头，这是蓝厂：</p>\n<img src=\"/static/images/eleme-first.png\" style=\"width: 50%\"/>\n<p>这是黄厂：</p>\n<img src=\"/static/images/meituan-first.png\" style=\"width: 50%\"/>\n<p>以前我们总是拿蓝厂的H5作为标杆，因为那是真的快，后来被某巴巴收购了之后好像反而退步了，肉眼可见的是往里面塞了个alipayjsapi.min.js，还有一些其他乱七八糟的，乱塞sdk也就算了，还在控制台耀武扬威：</p>\n<img src=\"/static/images/alipay-warning.png\" style=\"width: 50%\"/>\n<p>那么如何控制首屏的流量呢？方法还是很多的，除了gzip内容之外，得益于ES模块，和新世代的打包工具Rollup，我们可以很好的做到 Tree Shaking 然后做好懒加载，至于怎么分割懒加载的代码内容，一半是这三个方面：</p>\n<p>1.业务代码，基本上和路由绑定，只要到了这块路由的时候再去加载</p>\n<p>2.第三方库代码，原则上其实也是需要被分割，只有用到的时候加载，可以同上</p>\n<p>3.用到次数很多的公共代码，就是不可或缺的那些代码，尽量服用而不是放在各个页面从属的代码中</p>\n<p>这个第三点，基本上是我们首屏逃不过的内容，1和2在目前 Vue 的 dynamic import 和 React 的 Suspense 以及一系列的周边插件支持下可以很好的做到基于路由的懒加载。那么我们需要考虑的就是第三点，此时就要开始打开 webpack 那看也不想看的文档了，从 v4 开始，webpack开始支持 SplitChunksPlugin：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n  optimization<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    splitChunks<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      chunks<span class=\"token operator\">:</span> <span class=\"token string\">'async'</span><span class=\"token punctuation\">,</span>\n      minSize<span class=\"token operator\">:</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">,</span>\n      minChunks<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      maxAsyncRequests<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n      maxInitialRequests<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n      automaticNameDelimiter<span class=\"token operator\">:</span> <span class=\"token string\">'~'</span><span class=\"token punctuation\">,</span>\n      enforceSizeThreshold<span class=\"token operator\">:</span> <span class=\"token number\">50000</span><span class=\"token punctuation\">,</span>\n      cacheGroups<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        defaultVendors<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          test<span class=\"token operator\">:</span> <span class=\"token regex\">/[\\\\/]node_modules[\\\\/]/</span><span class=\"token punctuation\">,</span>\n          priority<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n          reuseExistingChunk<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          minChunks<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n          priority<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n          reuseExistingChunk<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h5>chunks:</h5>\n<p>表示什么类型的代码参与分割，同步、异步或者初始化代码，并且支持function来做进一步过滤</p>\n<h5>minSize：</h5>\n<p>代表参与分割的最小体积</p>\n<h5>cacheGroups：</h5>\n<p>这是对参与分割的代码的分组，每个分组具有优先级由 priority 控制，可以支持正则匹配对应的路径</p>\n<h5>minChunks：</h5>\n<p>这是我们控制的核心变量，意思是被引用多少次之后才会被抽离出来作为一个单独的模块，并且在cacheGroups内，受到优先级控制，在上面的例子中 defaultVendors 组 内的代码不受到引用 2 次以上被抽离这条规则的约束，而 default 组内的则被影响</p>\n<h5>maxInitialRequests：</h5>\n<p>最大初次请求数，但是需要根据实际情况调整，maxInitialRequests 太小的话，像上面的首屏有40多个请求chunk，如果设置为30则可能完成30个chunk相关的内容就去绘制页面了，后面请求则在那一刻暂时被挂起，之后再进行请求反而又会再做一次渲染</p>\n<h5>maxAsyncRequests：</h5>\n<p>最大异步请求数，记得v4的文档出来的时候，推荐的是10，可以理解为需要异步请求的时候，最大能有多少个异步请求来加载 chunk，太少可能会发生上一条说的问题，太多的话，可能浏览器处理不过来，用户又需要等待，看上去有点像 React 的 Fiber 的想法，在合适的时间内加载适当的内容来保证整个体验不那么卡顿，不知道我的理解对不对</p>\n<p>经过一顿设置，又怎么来看我们的包打完到底是什么结构呢？那么就要请出 <a href=\"https://github.com/webpack-contrib/webpack-bundle-analyzer\">webpack-bundle-analyzer</a> 这尊大佛了：</p>\n<img src=\"/static/images/webpack-a-figure.png\" style=\"width: 80%\"/>\n<p>由于隐私原因，不能放出旁边的业务路径，在这个图上我们很清楚能看到 vendor - 第三方库包含了 mobx、处理大数的 decimal.js ;而我们的入口app.js 则是 react 相关的代码，在这些图中可以更清楚知道，哪些代码被重复打包了，如果它确实没有超过 minChunks 的次数，那么被打包到各个 chunk 是合理的，如果确实超过了，那么就变成公共的比较好。</p>\n<p>另一方面也可以看下列表：</p>\n<img src=\"/static/images/webpack-a-list.png\" style=\"width: 80%\"/>\n<p>对于一个移动端的页面，公共模块和入口文件以及首屏第一个文件的体积加起来最好不要太大，400kb已经是稍微有点大了。</p>\n<h3>提供回退重载方法</h3>\n<p>这年头 React 都提供了 <a href=\"https://reactjs.org/docs/error-boundaries.html\">Error Boundaries</a>了，但是有些应用却不给用户活路，一旦出现了js错误或者网络请求失败，那么用户看到的就是一个白屏，至少...你给一个返回按钮是吧，有一些国有大银行嵌入页面那真是，不给活路啊，比如某银行的积分商城：</p>\n<img src=\"/static/images/boc.jpeg\" style=\"width: 50%\"/>\n<p>它的这个顶部返回按钮是 web 内容，那么，如果没有加载出来这一块，我就无法返回了，只能杀掉App重新进去，做的好的例如某黄厂：</p>\n<img src=\"/static/images/mt-refresh.jpeg\" style=\"width: 50%\"/>\n<p>就很人性化了</p>\n<h3>给人看得懂的提示</h3>\n<p>在我们某些系统中，至少，有人性的关怀，知道系统它会累：</p>\n<img src=\"/static/images/tired.png\" style=\"width: 50%\"/>\n<p>而有些地方则吐出一堆后端的错误，由于图太过于暴力，又会泄露我们的参数，所以就不上图了，至少后端和前端能够约定好，错误的分类，错误的提示方法，以及特定错误的处理方式</p>\n<p>更过分的是，有些系统出了错，它就沉默，但只是用户看不到，控制台那是一片红</p>\n<h3>去掉不必要的双向绑定（套娃）</h3>\n<p>比如 scroll-view 这种小程序的毒瘤组件：</p>\n<p>监听 scroll-view 组件的滚动事件时，不要实时的改变 scroll-top/scroll-left 属性，因为监听滚动时，视图层向逻辑层通讯，改变 scroll-top/scroll-left 时，逻辑层又向视图层通讯，这样就可能造成通讯卡顿。</p>\n<p>这么操作后，尤其是承载很多内容的时候，这个组件就陷入了混沌状态，当你快速滚动之后，停下来，它又会自己滚动很久</p>\n<p>在小程序中，有一个横向切换分组，纵向是分组内容+分页的场景下，分组是用 scroll-view 写的，而列表是 Swiper 嵌套了 纵向的 scroll-view </p>\n<p>那么横向滚动 swiper 会去设置分组  scroll-view 的 scroll-left， 而点击分组如果此时去设置 swiper 的 index，又会导致 swiperChange 引发去设置 scroll-view 的 scroll-left, 进而继续重复上述过程，这就是传说中的套娃</p>\n<p>具体这个问题怎么解，标题已经给了答案</p>\n<h3>做好虚拟列表(滑动窗口)</h3>\n<p>继续上一个小标题的内容，虽然在滚动的问题解决了，但是如果分组有1000个呢？微信的 swiper 可承载不了这么多内容，必然会卡顿，此时就需要类似于虚拟列表的解决方案，以下是在 Taro 下面的一个案例：</p>\n<p>1.设置当前在看的分组为 index</p>\n<p>2.将 index 附近 maxSwiperLength / 2 作为可见区域</p>\n<p>3.预先计算好所有 scrollLeft 的值，只有通过Swiper直接设置scrollLeft</p>\n<p>4.一旦当前分组切换了，可见区域也相应的进行变更</p>\n<p>5.即是，可见区域永远是 maxSwiperLength + 1 那么长，总的 Dom 数量也会有一个上限</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleChangeGroup</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> arr<span class=\"token operator\">:</span> ISwiperIndexMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> length<span class=\"token operator\">:</span> goodsLength <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>groupAndGoods<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span>\n        index <span class=\"token operator\">-</span> maxSwiperLength <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> index <span class=\"token operator\">-</span> maxSwiperLength <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span>\n        index <span class=\"token operator\">+</span> maxSwiperLength <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;=</span> goodsLength\n  <span class=\"token operator\">?</span> index <span class=\"token operator\">+</span> maxSwiperLength <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n  <span class=\"token operator\">:</span> goodsLength<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">setSwiperIndexMap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  realIndex <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">getChooseRect</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getChooseRect</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>allScrollLefts<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> store<span class=\"token punctuation\">.</span>groupAndGoods<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Need to rewrite when Taro upgrade to v3.0.0</span>\n    <span class=\"token comment\">// Use useReady to do this for loop</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> store<span class=\"token punctuation\">.</span>groupAndGoods<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> Taro<span class=\"token punctuation\">.</span><span class=\"token function\">createSelectorQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      query\n        <span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">#swiper-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">boundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">rect</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> subLeft <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> subHalfWidth <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> screenHalfwidth <span class=\"token operator\">=</span> width <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> needScroll <span class=\"token operator\">=</span>\n              subLeft <span class=\"token operator\">-</span> screenHalfwidth <span class=\"token operator\">+</span> subHalfWidth<span class=\"token punctuation\">;</span>\n        allScrollLefts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>needScroll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setScrollLeft</span><span class=\"token punctuation\">(</span>needScroll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setScrollLeft</span><span class=\"token punctuation\">(</span>allScrollLefts<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>其他方面</h3>\n<p>比如做好动画方面的交互，可以看看 <a href=\"https://markgeyer.com/pres/the-art-of-ui-animations/\">https://markgeyer.com/pres/the-art-of-ui-animations/</a> 通过一些设计和数学公式能给用户更愉悦的感觉，有些设计方面的内容会让人印象深刻，比如 Apple Pay 的消费成功声音(大概是消费让人愉悦...)</p>\n<p>另外，本文内容比较片面又很零散，欢迎指正</p>","excerpt":"控制内容流量 这可能是一个老生常谈的内容，但是往往非常容易被忽略。虽然现在网速越来越快，但是很多用户的使用场景是在移动端并不是有在家100M下行的速度，所以怎么样能保证在网络不太好的情况下，让用户至少能用。 分为两方面，第一方面自然是服务器的下行带宽必须非常大。那么解决方法自然是充钱了。 pony…","frontmatter":{"date":"21 December, 2020","path":"/blog/something-about-user-ex","title":"关于体验和性能的一些乱弹"},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{}}}